////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
//      and may be used under the terms of the MIT license. See the LICENSE file for details.     //
//                        Copyright: (c) 2019 German Aerospace Center (DLR)                       //
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TileId.hpp"

namespace csp::lodbodies {

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId::TileId()
    : mPatchIdx(-1)
    , mLevel(-1)
    , mTime("")
    , mSecTime("") {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId::TileId(int level, glm::int64 patchIdx)
    : mPatchIdx(patchIdx)
    , mLevel(level)
    , mTime("")
    , mSecTime("") {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TileId::TileId(int level, glm::int64 patchIdx, std::string time, std::string secTime)
    : mPatchIdx(patchIdx)
    , mLevel(level)
    , mTime(time)
    , mSecTime(secTime) {  
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::reset() {
  mPatchIdx = -1;
  mLevel    = -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::setTimes(std::string time, std::string secTime) {
  mTime = time;
  mSecTime = secTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int TileId::level() const {
  return mLevel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::level(int level) {
  mLevel = level;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

glm::int64 TileId::patchIdx() const {
  return mPatchIdx;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TileId::patchIdx(glm::int64 pi) {
  mPatchIdx = pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::string TileId::getTime() const{
  return mTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::string TileId::getSecTime() const{
  return mSecTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool isValid(TileId const& tileId) {
  return (tileId.level() >= 0 && tileId.patchIdx() >= 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool isSameLevel(TileId const& lhs, TileId const& rhs) {
  return (lhs.level() == rhs.level());
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool operator==(TileId const& lhs, TileId const& rhs) {
  return (lhs.level() == rhs.level() && lhs.patchIdx() == rhs.patchIdx() && lhs.getTime() == rhs.getTime() && lhs.getSecTime() == rhs.getSecTime());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Print Method (not in class)
std::ostream& operator<<(std::ostream& os, TileId const& tileId) {
  os << "(" << tileId.level() << " - " << tileId.patchIdx() << ")";

  return os;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::lodbodies
